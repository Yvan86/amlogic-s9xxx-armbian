#==========================================================================
# Description: Build Armbian
# Copyright (C) 2021 https://github.com/ophub/amlogic-s9xxx-armbian
#==========================================================================

name: Build armbian

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      set_release:
        description: "Select OS Release."
        required: false
        default: "jammy"
        type: choice
        options:
          - jammy
          - bullseye
          - lunar
          - bookworm
      armbian_board:
        description: "Select device board."
        required: false
        default: "all"
        type: choice
        options:
          - all
          - s905x-t95_s912-t95z-plus_s905l3-unt400g1
          - s912_s912-m8s-pro_s922x_s922x-ct2000_s922x-reva
          - smart-am40_station-m1_sw799_tn3399_vplus_zysj
          - s905d
          - s905d-ki-pro
          - s905d-sml5442tw
          - s905x
          - s905x-tx9
          - s905x-t95
          - s905x-b860h
          - s905x-tbee
          - s905w
          - s905w-w95
          - s905w-x96w
          - s905w-x96-mini
          - s905l
          - s905l2
          - s905l2-wojia
          - s905l2-e900v21e
          - s905l3
          - s905l3-cm211
          - s905l3-unt400g1
          - s905l3a
          - s905l3a-cm311
          - s905l3a-m401a
          - s905l3b
          - s905l3b-e900v22e
          - s905l3b-e900v22d
          - s905l3b-ip103h
          - s905lb-q96-mini
          - s905lb-r3300l
          - s912
          - s912-zyxq-fake
          - s912-h96pro-plus
          - s912-m8s-pro
          - s912-t95z-plus
          - s912-tx9-pro-3g
          - s912-tx9-pro-2g
          - s912-nexbox-a1
          - s912-nexbox-a2
          - s912-tx8-max
          - s912-x92
          - s912-phicomm-t1
          - s905x2
          - s905x2-x96max-2g
          - s905x2-km3
          - a311d
          - s922x
          - s922x-gtking
          - s922x-gtkingpro-h
          - s922x-reva
          - s922x-odroid-n2
          - s922x-ugoos-am6
          - s922x-ct2000
          - s905x3
          - s905x3-hk1
          - s905x3-x96max
          - s905x3-h96max
          - s905x3-ugoosx3
          - s905x3-tx3
          - s905x3-tx3-bz
          - s905x3-a95xf3
          - s905x3-a95xf3-gb
          - s905x3-x96air
          - s905x3-x96air-gb
          - s905x3-ip1001m
          - s905x3-q1
          - s905x3-q2
          - s905x3-a100
          - s905x3-2101
          - s905x3-whale
          - s905x3-b
          - s905
          - s905-mxqpro-plus
          - s905-beelink-mini
          - rock5b
          - h88k
          - ipc-r
          - r66s
          - r68s
          - h66k
          - h68k
          - h69k
          - e25
          - nanopi-r5s
          - panther-x2
          - eaidk-610
          - king3399
          - tn3399
          - kylin3399
          - hugsun-zm
          - crrc
          - smart-am40
          - sw799
          - zysj
          - dg3399
          - dlfr100
          - emb3531
          - beikeyun
          - l1pro
          - station-m1
          - vplus
          - tanix-tx6
      armbian_kernel:
        description: "Select kernel version."
        required: false
        default: "5.15.1_6.1.1"
        type: choice
        options:
          - 5.4.1_5.10.1
          - 5.15.1_6.1.1
          - 5.4.1
          - 5.10.1
          - 5.15.1
          - 6.1.1
      auto_kernel:
        description: "Auto use the latest kernel."
        required: false
        default: true
        type: boolean
      kernel_repo:
        description: "Set the kernel repository."
        required: false
        default: "ophub/kernel"
        type: choice
        options:
          - ophub/kernel
      kernel_usage:
        description: "Set the tags of the stable kernel."
        required: false
        default: "stable"
        type: choice
        options:
          - stable
          - flippy
          - dev
          - beta
      armbian_fstype:
        description: "Select armbian rootfs type."
        required: false
        default: "ext4"
        type: choice
        options:
          - ext4
          - btrfs
      armbian_storage:
        description: "Select image storage type."
        required: false
        default: "save"
        type: choice
        options:
          - save
          - temp
      builder_name:
        description: "Set Armbian builder signature."
        required: false
        default: "angel"
        type: choice
        options:
          - angel
          - yourname

env:
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_armbian)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Download source code
        id: down
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          df -hT ${PWD}
          git clone -q --single-branch --depth=1 --branch=main https://github.com/armbian/build.git build
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile Armbian [ ${{ inputs.set_release }} ]
        id: compile
        if: ${{ steps.down.outputs.status }} == 'success' && !cancelled()
        run: |
          # Compile method and parameter description: https://docs.armbian.com/Developer-Guide_Build-Options
          cd build/
              ./compile.sh RELEASE=${{ inputs.set_release }} BOARD=odroidn2 BRANCH=current BUILD_MINIMAL=no \
                           BUILD_ONLY=default HOST=armbian BUILD_DESKTOP=no EXPERT=yes KERNEL_CONFIGURE=no \
                           COMPRESS_OUTPUTIMAGE="sha" SHARE_LOG=yes
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clean up server space
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          # Searching for Armbian image
          image_file="$(basename $(ls build/output/images/*.img 2>/dev/null | head -n 1))"
          img_version="$(echo ${image_file} | grep -oE '[2-9][0-9]\.[0-9]{1,2}\.[0-9]{1,2}' | head -n 1)"
          img_kernel="$(echo ${image_file} | grep -oE '[5-9]\.[0-9]{1,2}\.[0-9]{1,3}' | head -n 1)"
          save_image_name="Armbian_${img_version}-trunk_${img_kernel}.img"

          # Searching for rootfs file
          rootfs_file="$(ls build/cache/rootfs/rootfs-*.tar.zst 2>/dev/null | head -n 1)"
          save_rootfs_name="Armbian_${img_version}-${{ inputs.set_release }}_rootfs"

          # Create temporary directory
          rootfs_tmp="build/output/images/rootfs_tmp"
          sudo mkdir -p ${rootfs_tmp}
          sudo chown root:root ${rootfs_tmp}
          [[ "${?}" == "0" ]] && echo -e "01. Temporary directory creation completed."

          # Save Armbian rootfs
          [[ -n "${rootfs_file}" ]] && {
              sudo tar -I zstd -xvf ${rootfs_file} -C ${rootfs_tmp}/ >/dev/null
              cd ${rootfs_tmp}/
                  sudo tar -czf ${save_rootfs_name}.tar.gz *
                  sudo mv -f ${save_rootfs_name}.tar.gz ../
                  [[ "${?}" == "0" ]] && echo -e "02. Making Armbian rootfs completed."
          }

          # Save Armbian image
          [[ -n "${image_file}" ]] && {
              cd ../
                  mv -f ${image_file} ${save_image_name}
                  pigz -qf *.img || gzip -qf *.img
                  [[ "${?}" == "0" ]] && echo -e "03. Renaming Armbian image completed."
          }

          # Add sha256sum verification files
          sudo rm -rf $(ls . | grep -vE ".img.gz|.tar.gz" | xargs) 2>/dev/null
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done
          [[ "${?}" == "0" ]] && echo -e "04. The files in the current directory:\n$(ls -l .)"

          # Delete Armbian build source codes and temporary files
          cd ../../
              sync && sudo rm -rf $(ls . | grep -v "^output$" | xargs)
              [[ "${?}" == "0" ]] && echo -e "05. Armbian source code cleanup completed."

          # Output cleaning result information
          df -hT ${PWD}
          echo "build_tag=Armbian_${{ inputs.set_release }}_${{ inputs.armbian_storage }}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload Armbian image to Release
        uses: ncipollo/release-action@main
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.clean.outputs.build_tag }}
          artifacts: build/output/images/*
          allowUpdates: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Rebuild Armbian
        uses: ophub/amlogic-s9xxx-armbian@main
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          build_target: armbian
          armbian_path: build/output/images/*.img.gz
          armbian_board: ${{ inputs.armbian_board }}
          armbian_kernel: ${{ inputs.armbian_kernel }}
          auto_kernel: ${{ inputs.auto_kernel }}
          kernel_repo: ${{ inputs.kernel_repo }}
          kernel_usage: ${{ inputs.kernel_usage }}
          armbian_fstype: ${{ inputs.armbian_fstype }}
          builder_name: ${{ inputs.builder_name }}
          gh_token: ${{ secrets.GH_TOKEN }}

      - name: Upload Rebuild image to Release
        uses: ncipollo/release-action@main
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.clean.outputs.build_tag }}
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### Armbian Image information
            - Default username: root
            - Default password: 1234
            - Install command: armbian-install
            - Update command: armbian-update
            ### Armbian Image Verification
            - sha256sum
